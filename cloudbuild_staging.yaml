steps:
  # Install and generate Prisma client
  - name: "node:20-alpine"
    id: Generate Prisma
    entrypoint: sh
    args:
      - "-c"
      - |
        echo "üì¶ Installing dependencies..."
        npm ci
        echo "üîß Generating Prisma client..."
        npx prisma generate

  # Build container image with caching
  - name: "gcr.io/cloud-builders/docker"
    id: Build Container
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "üèóÔ∏è Starting Docker build..."
        docker build \
          --progress=plain \
          --cache-from=asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest \
          --target=runner \
          --build-arg NEXT_PUBLIC_COMSCORE_ID=${_NEXT_PUBLIC_COMSCORE_ID} \
          --build-arg NEXT_PUBLIC_LOTAME_CLIENT_ID=${_NEXT_PUBLIC_LOTAME_CLIENT_ID} \
          --build-arg NEXT_PUBLIC_CB_UID=${_NEXT_PUBLIC_CB_UID} \
          --build-arg NEXT_PUBLIC_CHARTBEAT_API_KEY=${_NEXT_PUBLIC_CHARTBEAT_API_KEY} \
          --build-arg NEXT_PUBLIC_CHARTBEAT_HOST=${_NEXT_PUBLIC_CHARTBEAT_HOST} \
          --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=${_NEXT_PUBLIC_GOOGLE_CLIENT_ID} \
          --build-arg NEXT_PUBLIC_CDN_URL="https://freemalaysiatoday.com" \
          --build-arg NEXT_PUBLIC_GCS_BUCKET="https://media.freemalaysiatoday.com" \
          --build-arg WORDPRESS_API_URL=${_WORDPRESS_API_URL} \
          --build-arg WORDPRESS_AUTH_REFRESH_TOKEN=${_WORDPRESS_AUTH_REFRESH_TOKEN} \
          --build-arg WORDPRESS_PREVIEW_SECRET=${_WORDPRESS_PREVIEW_SECRET} \
          --build-arg DATABASE_URL=${_DATABASE_URL} \
          --build-arg NEXTAUTH_SECRET=${_NEXTAUTH_SECRET} \
          --build-arg GOOGLE_CLIENT_SECRET=${_GOOGLE_CLIENT_SECRET} \
          --build-arg REVALIDATION_TOKEN=${_REVALIDATION_TOKEN} \
          --build-arg SYNC_KEY=${_SYNC_KEY} \
          --build-arg CLOUDFLARE_API_TOKEN=${_CLOUDFLARE_API_TOKEN} \
          --build-arg CLOUDFLARE_ZONE_ID=${_CLOUDFLARE_ZONE_ID} \
          --build-arg CHARTBEAT_API_KEY=${_CHARTBEAT_API_KEY} \
          --build-arg CHARTBEAT_HOST=${_CHARTBEAT_HOST} \
          --build-arg YOUTUBE_API_KEY=${_YOUTUBE_API_KEY} \
          --build-arg NODE_ENV=production \
          -t asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA \
          -t asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest \
          .

  # Push both container images
  - name: "gcr.io/cloud-builders/docker"
    id: Push Container
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "üì§ Pushing images..."
        docker push asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA
        docker push asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest

  # Blue/Green Deployment
  - name: "gcr.io/cloud-builders/gcloud"
    id: Deploy
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get current active environment
        echo "üîç Getting current deployment status..."
        activeEnv=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.traffic.tags)' || echo "blue")
        
        # Set next environment
        nextEnv="green"
        if [[ "$activeEnv" == *"green"* ]]; then
          nextEnv="blue"
        fi
        
        echo "üöÄ Current active: $activeEnv, Deploying to: $nextEnv"
        
        # Deploy new version
        echo "üì¶ Deploying new version..."
        gcloud run deploy ${_SERVICE_NAME} \
          --image=asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA \
          --no-traffic \
          --tag=$nextEnv \
          --region=${_REGION} \
          --port=3000 \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=2 \
          --max-instances=10 \
          --set-env-vars=NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1

        # Verify deployment
        echo "üîç Verifying deployment..."
        sleep 10  # Give the service some time to start
        
        # Switch traffic
        echo "üîÑ Switching traffic..."
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --to-tags $nextEnv=100 \
          --region=${_REGION}
        
        # Purge Cloudflare cache
        echo "üßπ Purging Cloudflare cache..."
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${_CLOUDFLARE_ZONE_ID}/purge_cache" \
          -H "Authorization: Bearer ${_CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
        
        echo "‚ú® Deployment completed successfully!"

substitutions:
  _REGION: asia-southeast1
  _SERVICE_NAME: fmt-v4

options:
  machineType: "E2_HIGHCPU_8"
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY

timeout: 1800s