steps:
  # Install and generate Prisma client
  - name: "node:20-alpine"
    id: Generate Prisma
    entrypoint: sh
    args:
      - "-c"
      - |
        echo "üì¶ Installing dependencies..."
        npm ci --legacy-peer-deps
        echo "üîß Generating Prisma client..."
        npx prisma generate

  # Build container image with caching
  - name: "gcr.io/cloud-builders/docker"
    id: Build Container
    args:
      - "build"
      - "--progress=plain"
      - "--cache-from=asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest"
      - "--target=runner"
      - "--build-arg"
      - "NODE_ENV=production"
      - "--build-arg"
      - "DATABASE_URL=${_DATABASE_URL}"
      - "--build-arg"
      - "NEXTAUTH_SECRET=${_NEXTAUTH_SECRET}"
      - "--build-arg"
      - "REVALIDATE_SECRET_KEY=${_REVALIDATE_SECRET_KEY}"
      - "--build-arg"
      - "NEXT_PUBLIC_DOMAIN=${_NEXT_PUBLIC_DOMAIN}"
      - "--build-arg"
      - "CLOUDFLARE_API_TOKEN=${_CLOUDFLARE_API_TOKEN}"
      - "--build-arg"
      - "CLOUDFLARE_ZONE_ID=${_CLOUDFLARE_ZONE_ID}"
      - "--build-arg"
      - "NEXT_PUBLIC_COMSCORE_ID=${_NEXT_PUBLIC_COMSCORE_ID}"
      - "--build-arg"
      - "NEXT_PUBLIC_LOTAME_CLIENT_ID=${_NEXT_PUBLIC_LOTAME_CLIENT_ID}"
      - "--build-arg"
      - "NEXT_PUBLIC_CB_UID=${_NEXT_PUBLIC_CB_UID}"
      - "--build-arg"
      - "NEXT_PUBLIC_CHARTBEAT_API_KEY=${_NEXT_PUBLIC_CHARTBEAT_API_KEY}"
      - "--build-arg"
      - "NEXT_PUBLIC_CHARTBEAT_HOST=${_NEXT_PUBLIC_CHARTBEAT_HOST}"
      - "--build-arg"
      - "NEXT_PUBLIC_GOOGLE_CLIENT_ID=${_NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
      - "--build-arg"
      - "YOUTUBE_API_KEY=${_YOUTUBE_API_KEY}"
      - "--build-arg"
      - "WORDPRESS_API_URL=${_WORDPRESS_API_URL}"
      - "--build-arg"
      - "NEXT_PUBLIC_CMS_URL=${_NEXT_PUBLIC_CMS_URL}"
      - "--build-arg"
      - "NEXT_PUBLIC_CDN_URL=${_NEXT_PUBLIC_CDN_URL}"
      - "--build-arg"
      - "NEXT_PUBLIC_GCS_BUCKET=${_NEXT_PUBLIC_GCS_BUCKET}"
      - "--build-arg"
      - "NEXT_PUBLIC_WORDPRESS_SECRET=${_NEXT_PUBLIC_WORDPRESS_SECRET}"
      - "--build-arg"
      - "NEXT_PUBLIC_WP_REFRESH_TOKEN=${_NEXT_PUBLIC_WP_REFRESH_TOKEN}"
      - "--build-arg"
      - "GOOGLE_CLIENT_SECRET=${_GOOGLE_CLIENT_SECRET}"
      - "--build-arg"
      - "REVALIDATION_TOKEN=${_REVALIDATION_TOKEN}"
      - "--build-arg"
      - "SYNC_KEY=${_SYNC_KEY}"
      - "--build-arg"
      - "CHARTBEAT_API_KEY=${_CHARTBEAT_API_KEY}"
      - "--build-arg"
      - "CHARTBEAT_HOST=${_CHARTBEAT_HOST}"
      - "--build-arg"
      - "NEXT_PUBLIC_CRYPTO_IV=${_NEXT_PUBLIC_CRYPTO_IV}"
      - "--build-arg"
      - "NEXT_PUBLIC_CRYPTO_KEY=${_NEXT_PUBLIC_CRYPTO_KEY}"
      - "--build-arg"
      - "CONTACT_US_RECIPIENT=${_CONTACT_US_RECIPIENT}"
      - "--build-arg"
      - "SENDGRID_API_KEY=${_SENDGRID_API_KEY}"
      - "-t"
      - "asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA"
      - "-t"
      - "asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest"
      - "."

  # Push container images
  - name: "gcr.io/cloud-builders/docker"
    id: Push Container
    args:
      - "push"
      - "asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA"

  # Push latest tag
  - name: "gcr.io/cloud-builders/docker"
    id: Push Latest
    args:
      - "push"
      - "asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:latest"

  # Blue/Green Deployment
  - name: "gcr.io/cloud-builders/gcloud"
    id: Deploy
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get current active environment
        echo "üîç Getting current deployment status..."
        activeEnv=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.traffic.tags)' || echo "blue")

        # Set next environment
        nextEnv="green"
        if [[ "$activeEnv" == *"green"* ]]; then
          nextEnv="blue"
        fi

        echo "üöÄ Current active: $activeEnv, Deploying to: $nextEnv"

        # Deploy new version with runtime environment variables
        echo "üì¶ Deploying new version..."
        gcloud run deploy ${_SERVICE_NAME} \
          --image=asia.gcr.io/$PROJECT_ID/cloud-run-source-deploy/${_SERVICE_NAME}:$COMMIT_SHA \
          --no-traffic \
          --tag=$nextEnv \
          --region=${_REGION} \
          --port=3000 \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=2 \
          --max-instances=10 \
          --set-env-vars="NODE_ENV=production" \
          --set-env-vars="NEXT_TELEMETRY_DISABLED=1" \
          --set-env-vars="DATABASE_URL=${_DATABASE_URL}" \
          --set-env-vars="NEXTAUTH_SECRET=${_NEXTAUTH_SECRET}" \
          --set-env-vars="REVALIDATE_SECRET_KEY=${_REVALIDATE_SECRET_KEY}" \
          --set-env-vars="NEXT_PUBLIC_DOMAIN=${_NEXT_PUBLIC_DOMAIN}" \
          --set-env-vars="CLOUDFLARE_API_TOKEN=${_CLOUDFLARE_API_TOKEN}" \
          --set-env-vars="CLOUDFLARE_ZONE_ID=${_CLOUDFLARE_ZONE_ID}" \
          --set-env-vars="YOUTUBE_API_KEY=${_YOUTUBE_API_KEY}" \
          --set-env-vars="WORDPRESS_API_URL=${_WORDPRESS_API_URL}" \
          --set-env-vars="NEXT_PUBLIC_CMS_URL=${_NEXT_PUBLIC_CMS_URL}" \
          --set-env-vars="NEXT_PUBLIC_CDN_URL=${_NEXT_PUBLIC_CDN_URL}" \
          --set-env-vars="NEXT_PUBLIC_GCS_BUCKET=${_NEXT_PUBLIC_GCS_BUCKET}" \
          --set-env-vars="NEXT_PUBLIC_COMSCORE_ID=${_NEXT_PUBLIC_COMSCORE_ID}" \
          --set-env-vars="NEXT_PUBLIC_LOTAME_CLIENT_ID=${_NEXT_PUBLIC_LOTAME_CLIENT_ID}" \
          --set-env-vars="NEXT_PUBLIC_CB_UID=${_NEXT_PUBLIC_CB_UID}" \
          --set-env-vars="NEXT_PUBLIC_CHARTBEAT_API_KEY=${_NEXT_PUBLIC_CHARTBEAT_API_KEY}" \
          --set-env-vars="NEXT_PUBLIC_CHARTBEAT_HOST=${_NEXT_PUBLIC_CHARTBEAT_HOST}" \
          --set-env-vars="NEXT_PUBLIC_GOOGLE_CLIENT_ID=${_NEXT_PUBLIC_GOOGLE_CLIENT_ID}" \
          --set-env-vars="NEXT_PUBLIC_WORDPRESS_SECRET=${_NEXT_PUBLIC_WORDPRESS_SECRET}" \
          --set-env-vars="NEXT_PUBLIC_WP_REFRESH_TOKEN=${_NEXT_PUBLIC_WP_REFRESH_TOKEN}" \
          --set-env-vars="GOOGLE_CLIENT_SECRET=${_GOOGLE_CLIENT_SECRET}" \
          --set-env-vars="REVALIDATION_TOKEN=${_REVALIDATION_TOKEN}" \
          --set-env-vars="SYNC_KEY=${_SYNC_KEY}" \
          --set-env-vars="CHARTBEAT_API_KEY=${_CHARTBEAT_API_KEY}" \
          --set-env-vars="CHARTBEAT_HOST=${_CHARTBEAT_HOST}" \
          --set-env-vars="NEXT_PUBLIC_CRYPTO_IV=${_NEXT_PUBLIC_CRYPTO_IV}" \
          --set-env-vars="NEXT_PUBLIC_CRYPTO_KEY=${_NEXT_PUBLIC_CRYPTO_KEY}" \
          --set-env-vars="CONTACT_US_RECIPIENT=${_CONTACT_US_RECIPIENT}" \
          --set-env-vars="SENDGRID_API_KEY=${_SENDGRID_API_KEY}" \
          --quiet

        # Verify deployment
        echo "üîç Verifying deployment..."
        sleep 10

        # Switch traffic
        echo "üîÑ Switching traffic..."
        gcloud run services update-traffic ${_SERVICE_NAME} \
          --to-tags $nextEnv=100 \
          --region=${_REGION} \
          --quiet

        # if [ $? -eq 0 ]; then
        #   # Purge Cloudflare cache only if deployment successful
        #   echo "üßπ Purging Cloudflare cache..."
        #   curl -X POST "https://api.cloudflare.com/client/v4/zones/${_CLOUDFLARE_ZONE_ID}/purge_cache" \
        #     -H "Authorization: Bearer ${_CLOUDFLARE_API_TOKEN}" \
        #     -H "Content-Type: application/json" \
        #     --data '{"purge_everything":true}'
          
          echo "‚ú® Deployment completed successfully!"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi

substitutions:
  _REGION: asia-southeast1
  _SERVICE_NAME: fmt-v4

options:
  machineType: "E2_HIGHCPU_8"
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY

timeout: 1800s
