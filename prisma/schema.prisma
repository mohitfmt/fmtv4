generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type VideosContentDetails {
  caption         Boolean
  definition      String
  dimension       String
  duration        String
  durationSeconds Int
  licensedContent Boolean
  projection      String
}

type VideosStatistics {
  commentCount Int
  likeCount    Int
  viewCount    Int
}

type VideosStatus {
  embeddable          Boolean
  license             String
  madeForKids         Boolean
  privacyStatus       String
  publicStatsViewable Boolean
  uploadStatus        String
}

type VideosThumbnails {
  default  String
  high     String
  maxres   String?
  medium   String
  standard String
}

model Account {
  id                String @id @map("_id")
  access_token      String
  expires_at        Int
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  userId            String

  @@unique([provider, providerAccountId])
}

model ArticleShare {
  id        String   @id @map("_id")
  createdAt DateTime @db.Date
  ip        String
  platform  String
  updatedAt DateTime @db.Date
  url       String
}

model ChartBeatJob {
  id        String   @id @map("_id")
  createdAt DateTime @db.Date
  queryId   String   @unique
  status    String
  updatedAt DateTime @db.Date
}

model Columnist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId Int
}

model LoggedUser {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @db.Date
  email         String   @unique
  emailVerified Boolean
  firstName     String?
  lastLogin     DateTime @db.Date
  lastName      String?
  name          String
  picture       String?
  updatedAt     DateTime @db.Date
}

model MostViewed {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  date  DateTime @db.Date
  image String
  slug  String
  title String
  uri   String
}

model PageView {
  /// Multiple data types found: String: 83.7%, String (ObjectId): 16.3% out of 1000 sampled entries
  id    Json   @id @map("_id")
  /// Multiple data types found: Int: 66%, BigInt: 34% out of 1000 sampled entries
  count Json
  url   String @unique
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  sessionToken Json?  @unique
}

model Share {
  /// Multiple data types found: String: 30.5%, String (ObjectId): 69.5% out of 1000 sampled entries
  id             Json     @id @map("_id")
  createdAt      DateTime @db.Date
  /// Multiple data types found: Int: 82.5%, BigInt: 17.5% out of 1000 sampled entries
  emailShares    Json
  /// Multiple data types found: Int: 82.5%, BigInt: 17.5% out of 1000 sampled entries
  facebookShares Json
  /// Multiple data types found: Int: 82.5%, BigInt: 17.5% out of 1000 sampled entries
  total          Json
  updatedAt      DateTime @db.Date
  url            String   @unique
  /// Multiple data types found: Int: 82.5%, BigInt: 17.5% out of 1000 sampled entries
  whatsappShares Json
  /// Multiple data types found: Int: 82.5%, BigInt: 17.5% out of 1000 sampled entries
  xShares        Json
}

model TrendingTag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  slug  String
  title String
  uri   String
}

model User {
  id            String @id @map("_id")
  email         String @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  emailVerified Json?
  image         String
  name          String
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  identifier Json?
  /// Field referred in an index, but found no data to define the type.
  token      Json?  @unique

  @@unique([identifier, token])
}

model system {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  key Json?  @unique
}

model videos {
  id                      String               @id @default(auto()) @map("_id") @db.ObjectId
  videoId                 String               
  title                   String
  description             String
  publishedAt             DateTime             @db.Date
  channelId               String
  channelTitle            String
  
  // Search & categorization
  searchableText          String?
  tags                    String[]
  categoryId              String
  defaultLanguage         String
  
  // Associations
  playlists               String[]
  relatedVideos           String[]
  
  // Media details
  thumbnails              VideosThumbnails
  contentDetails          VideosContentDetails
  statistics              VideosStatistics
  status                  VideosStatus
  
  // Metadata
  isShort                 Boolean
  videoType               String
  popularityScore         Int?
  tier                    String
  isActive                Boolean             @default(true)
  
  // Sync tracking
  lastSyncedAt            DateTime?           @db.Date
  syncVersion             Int                 @default(1)
  updatedAt               DateTime            @updatedAt
  playlistsUpdatedAt      DateTime?           @db.Date
  relatedVideosUpdatedAt  DateTime?           @db.Date
  
  // Remove the duplicate viewCount field
  
  @@index([videoId])
  @@index([publishedAt])
  @@index([playlists])
  @@index([tier, publishedAt])
  @@index([isShort, publishedAt])
  @@index([isActive])
}

model websub_stats {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  webhooksReceived Int      @default(0)
  videosProcessed  Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt // This is what we use for last webhook time
}

model websub_subscriptions {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  channelId    String    @unique
  webhookUrl   String
  status       String // active, pending, expired
  lastRenewal  DateTime?
  expiresAt    DateTime?
  renewalCount Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model channel_info {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId       String   @unique
  title           String
  description     String
  thumbnailUrl    String?
  subscriberCount Int
  videoCount      Int
  viewCount       BigInt
  customUrl       String?
  lastFetched     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([lastFetched])
}

model admin_activity_logs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  action     String
  entityType String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([timestamp])
  @@map("admin_activity_logs")
}

model VideoConfig {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  homepagePlaylist   String
  fallbackPlaylist   String?
  heroPlaylist       String
  shortsPlaylist     String
  displayedPlaylists Json
  updatedAt          DateTime @updatedAt
  sync               Json?    // Will store: { uploadsEtag, uploadsLastModified, uploadsPlaylistId, lastIdleCheck }
}

model PlaylistItems {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  playlistId  String
  videoId     String
  position    Int
  title       String
  addedAt     DateTime  @default(now())
  removedAt   DateTime?
  
  @@unique([playlistId, videoId])
  @@index([playlistId, position])
  @@index([playlistId, removedAt])
  @@map("playlistItems")
}

model Playlist {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  playlistId   String    @unique
  title        String
  description  String?
  visibility   String    @default("Public")
  createdAt    DateTime  @db.Date
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
  slug         String?
  
  // YouTube channel info
  channelId    String?
  channelTitle String?
  
  // Content info
  itemCount    Int       @default(0)
  thumbnailUrl String?
  
  // YouTube sync metadata
  lastSyncedAt DateTime? @db.Date
  syncVersion  Int       @default(1)
  privacyStatus String?
  publishedAt   DateTime? @db.Date
  
  // ADD THESE NEW FIELDS FOR SYNC:
  etag              String?
  lastModified      String?
  fingerprint       String?
  lastFingerprintAt DateTime?
  syncInProgress    Boolean   @default(false)
  lastSyncResult    Json?
  syncLeaseUntil    DateTime?
  syncLeaseOwner    String?
  activeWindowUntil DateTime?
  
  @@index([isActive])
  @@index([slug])
  @@index([lastFingerprintAt])
  @@index([syncLeaseUntil])
  @@map("playlists")
}

model SyncHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  status        String
  videosAdded   Int      @default(0)
  videosUpdated Int      @default(0)
  videosRemoved Int      @default(0)
  duration      Int
  error         String?
  playlistId    String?
  playlistName  String?
  timestamp     DateTime @default(now())
}

model CacheHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // cdn, lru, all
  action    String // clear, purge, optimize
  items     Int?
  timestamp DateTime @default(now())
}

model SyncStatus {
  id                String    @id @default("main") @map("_id")
  currentlySyncing  Boolean   @default(false)
  currentPlaylistId String?
  lastSync          DateTime?
  lastError         String?
  totalSyncs        Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("syncStatus")
}
